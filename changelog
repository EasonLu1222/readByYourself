[2019.7.11 - 16:00]
1. minor change
	a. enter_factory_image_prompt
	  - change from 'usb rndis & adb start: OK' to 'usb rndis'
	    cause somtetimes comport log will not show whole line but partial line

[2019.7.11 - 15:10]
1. use powersupply's serial number to find #1 & #2
	a. v6 jsonfile: add serial numbers info to gw_powersupply
	b. use scpi command *IDN? to get powersupply's serial number
	c. directly get correct order of powersupply
	d. once powersupply order is confirmed, trigger auto-detect of dut comports
		--> this will be changed in the future (use ftdi's serial number)
	e. auto-detect button no needed

2. bugs fixed
	a. when one dut is selected, only occupy that serial port but not both 
	b. ignore UnicodeError in serials>issue_command()
	   - this is important! otherwise sometimes it will cause test items error and blank in the tableview

[2019.7.10 - 17:50]
1. jsonfile version5
	a. add tasks/task_runeach.py to handle all tasktype=1 case
	b. remove old jsonfile & taskfile
	c. new jsonfile: v5_total.json & v5_simu.json

[2019.7.08 - 09:30]
1. overhaul runeach(), remove tasktype=3 case
	a.unify arguments 
		from 
			runeach(self, index, port, tasktype)
		to 
			runeach(self, row_idx, dut_idx, sid, tasktype)
	b. merge all separate py into one task_runeach.py (for tasktype=1 case)
	c. v4_total_test1.json for test, including following tests
		(1) max_current
		(2) speaker test
		(3) cpu freq test
	d. most of the tasktype=1 py still need to be moved into new task_runeach.py


[2019.7.04 - 19:00]
1. jsonfile verions 4
	a. re-org
	b. add v4_total_two_dut.json, v4_led.json, v4_simu.json
	c. delete jsonfile/en_us/* jsonfile/zh_TW/*
	d. move INSTRUMENT_MAP from instrument/__init__.py to app.py

2. accomdate both station jsonfile 
	a. choose STATION at app.py: main()

[2019.7.04 - 16:40]
1. re-arg SerialListener and change name to BaseSerialListener & move to serials module
	a. inherent BaseSerialListener to modify for each station need
	b. define instruments json and set_instruments()
	c. json str need to be integrate into jsonfile (v4?)

2. task_led 
	a. still bugs need to be fixed. all_pass logics
	b. exit key need to be ignored

3. add class MySetting
	a. change MyWindow.__init__. add task parameters back
	b. remove translate jsonfile function

[2019.7.02 - 19:40]
1. dut selectable (#1 or #2 or both). fix some bugs. preliminary correct version.

[2019.7.02 - 18:40]
1. dut selectable (#1 or #2 or both). somehow ugly. need to be organized.

[2019.7.02 - 15:20]
1. merged success. backgrounad color pass/fail change ok.

[2019.7.02 - 14:40]
1. set backgraound color based on pass/fail of two DUTs

[2019.7.02 - 14:10]
1. add transparent loading animation (apple style)
	a. add images/AppleLoading.gif
	b. add show_animation_dialog QSignal


[2019.7.02 - 11:35]
1. complete the comport auto detect process
	a. two dut, two powersupply, one dmm on
	b. click auto-detect button
	c. turn on powersupply1 which connect to dut1
	d. auto-detect the correct comport of dut & powersupply and display
	e. turn on 2nd powersupply and display
	f. ready to run test!

2. modification
	a. instrument/__init__.py: get_serial() function
	update_serial(instruments) --> update_serial(instruments, inst_type, comports)

	b. app.py
	- SerialListener
		self.comports_instrument --> self.comports_ps, self.comports_dmm
		self.instruments --> self.ports_ps, self.ports_dmm
	- MyWindow
	  modified:
		clean_power()
		closeEvent()
		taskdone()
		instrument_ready()
		ser_update()
		instrument_update() --> ps_update() & dmm_update()
	  added:
		btn_detect_mb()
		btn_detect_mb_after()

[2019.6.28 - 16:50]
1. auto detect the comport of #1 dut using button
	a. when auto-detect button press, listening to current two comports
	b. plug adator into #1 dut
	c. detect the comport which response
	d. change self._comports if necessary

[2019.6.28 - 08:10]
1. add comport label-box for instruments whenever serial ports get updated
2. TBD: DUT/powersupply comports need to be correct according to the DUT's num

[2019.6.26 - 17:35]
1. start to write testing log

[2019.6.26 - 15:40]
1. fix bugs
	a. class Task - limits()

[2019.6.26 - 08:30]
1. parse limits of jsonfile (currently for tasktype2)
	a. change power_check2.py
	b. chnage speaker_check.py

[2019.6.25 - 16:40]
1. add summary row to check pass/fail
2. modifications for type2 task
	a. modify tasks/power_check2.py, speaker_check.py to allow both 1 & 2 DUTs
	b. change v3_total.json to v3_total_two_dut.json
	c. new v3_total_one_dut.json


[2019.6.24 - 16:15]
1. reorg class Task to allow simulated task
	a. register action mechanism to decouple some actions from class Task like
	   is_serial_ok(), set_power(), enter_prompt(), ...
	b. add simulated json and py
		b1. jsonfile/v3_simu1.json
		b2. tasks/simu_each1.py
		b3. tasks/simu_group1.py

2. remove model dependency from QTableWidget. setModel()->set_data()

3. users can't select & focus the row now


[2019.6.21 - 12:10]
1. speaker test done
	a. jsonfile template v3 proposed.
		a.1 add hidden fields to handle complex tests
		a.2 ex: use two scripts speaker_setup.py & speaker_check.py to handler
		speaker test. speaker_setup.py is set hidden.
	b. add two test scripts: speaker_setup.py & speaker_check.py
	c. v3_speaker.json & v3_total.json for app.py

2. UI modification
	a. now row selection are highlighting the processing rows
	b. multiple rows selection for task type 2

3. minor adjust
	app.py
		a. change runeach1 & runeach3 to runeach
		b. change runeach2 to rungroup
		c. still need to be reorg

[2019.6.19 - 14:40]
1. unify logger into one module: mylogger.py
   usage:
		- from mylogger import logger
		- logger.info(...)

2. measure maximum current when boot up
  mechanism:
	a. move set_power() when button clicked
	b. in set_power, use new class ProcessListener(QThread) to listen for
	   two subprocess poweron.py to poweron and measure maximaum currents
	   at the same time. When the measures are done, use recieve_power()
	   to get the results and save it as a file "power_results".
	c. use power_max_current.py to get results from "power_results".
	   wait until the file exists and not empty.
  modified
	json:
		a. add tasktype to json structure
		b. power_new2.json for app.py
	py:
		a.instrument/__init__.py: add measure_current()

  added:
	a. tasks/poweron.py
	b. tasks/power_max_current.py

3. fix serial bugs
    a. close window raise serial error
	b. click button not working
	   - actually not close serial for powersupply previously

4. insturment update & ready
	a. button enabled only when power1,power2,dmm1 are detected
	a. add instrument_ready(), instrument_update() for MyWindow
	c. pickle [dmm1,power1,power2] in file "instrument" for
	   poweron.py to unpickle to get the correct com port of each
	   instruments

[2019.6.17 - 14:00]
1. minor bug fixed to allow test2.json(both power & other tests) passed for 2 DUTs
2. measure frequency test ok

[2019.6.14 - 13:50]
minor bug fixed to allow test2.json(both power & other tests) passed

[2019.6.14 - 09:30]
0. modify power rail measurments to all channles & DUTs all at once without chaning the json file format
	a. add Task.runeach2
1. power rail voltage for two DUTs : gui ok
	a. power_new.json + tasks/power_check2.py
	b. modify instrument package: SCPI commands less buggy

[2019.6.11 - 16:52]
0. use power supply to boot up DUT
1. power rail voltage measurement : function ok
2. power rail voltage for single DUT : gui ok
3. add package instrument
4. add power.json for test
5. modify power_check.py

[2019.5.27 - 15:50]
1. multiple com ports for auto & manual mode all work
2. solve serial ports confliction between comports update & tasks serial usages

[2019.5.26 - 21:38]
1. update com ports realtime and show it on top
   a. new layout: design3.ui

[2019.5.26 - 00:20]
1. add two debug terminals
   a. new layout: design2.ui
   b. first attempt to try promote widget at Qt Designer
   c. one term for serial output; the other for task output

[2019.5.25 - 22:55]
1. manual test framwork for multiple duts
	a. new modules: view/imglist.py view/task_dialog.py
2. led test
	a. prototypes: proto/led.py
	b. new modules: tasks/task_led.py
	c. led test on one duts OK
3. serial port listner
	a. add class SerialListener (app.py) & func get_serial (serials.py)

[2019.5.23 - 10:40]
1. add module serials.py
2. link to PCBA and wait for prompt to occur
3. modify test1.py to actually connect to PCBA and do wifi interface check
4. remove some redundant codes

